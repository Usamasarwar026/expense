
//   export const updateImage = createAsyncThunk(
//     'auth/updateImage',
//     async (uri: string, { rejectWithValue }) => {
//       try {
//         const currentUser = auth().currentUser;
//         if (!currentUser) {
//           throw new Error('User is not authenticated');
//         }
  
//         // Update the profile image
//         await currentUser.updateProfile({ photoURL: uri });
  
//         // Return the updated image URL
//         return uri;
//       } catch (error: any) {
//         console.log('Error updating profile image: ', error.message);
  
//         // Reject with the error message
//         return rejectWithValue(error.message);
//       }
//     }
//   );




// ==========
  // export const manageImageUri = createAsyncThunk(
  //   'auth/manageImageUri',
  //   async({type, uri}: {type: string, uri: string}, {rejectWithValue })=>{
  //     const userId = await auth().currentUser?.uid;
  //     if (!userId) {
  //       console.log('Error', 'User is not authenticated');
  //       return;
  //     }
  //     try {
  //     if(type === 'fetch'){
  //         const doc = await firestore().collection('users').doc(userId).get();
  //         if (doc.exists) {
  //           return { profileImageUri: doc.data()?.profileImageUri, name: doc.data()?.name };
  //         }else{
  //           return rejectWithValue("no data found")
  //         }
          

  //     }else if(type === 'store' && uri){
  //       await firestore().collection('users').doc(userId).update({
  //           profileImageUri: uri,
  //       });
  //       return { profileImageUri: uri }
  //     }
  //       } catch (error: any) {
  //         console.error('Error in manageImageUri:', error);
  //         return rejectWithValue(error.message);
  //       }
  
  //     }
    
    
  // )
  





  {/* <View style={style.daybar}>
          <TouchableOpacity style={style.barbox}>
            <Text style={style.bar1}>Today</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Week</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Month</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Year</Text>
          </TouchableOpacity>
        </View> */}
        {/* <View style={style.recentBar}>
          <View>
            <Text style={style.recentBarText1}>Recent Transaction</Text>
          </View>
          <TouchableOpacity>
            <Text style={style.recentBarText2}>See All</Text>
          </TouchableOpacity>
        </View>
        <View style={style.listbar}> */}
         
          {/* {transactions.length === 0 ? (
            <View style={style.listtextBox}>
              <Text style={style.listtext}>No transactions found.</Text>
            </View>
          ) : (
            <FlatList
              nestedScrollEnabled={true}
              style={style.listbar}
              data={transactions}
              keyExtractor={(item, index) => item.id || index.toString()}
              renderItem={({item}) => {
                let timeString = 'N/A';

                if (item.timestamp) {
                  let dateObj = new Date(item.timestamp); // Convert timestamp string to Date object
                  if (!isNaN(dateObj.getTime())) {
                    timeString = dateObj.toLocaleTimeString([], {
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: true,
                    });
                  }
                }
                return (
                  <Transction
                    title={item.category}
                    subtitle={item.description}
                    amount={item.amount}
                    // time={item.timestamp ? item.timestamp : 'N/A'}
                    time={timeString}
                    image={{uri: item.imageUri}}
                  />
                );
              }}
            />
          )}
        </View> */}

        


// tab navigation==========================

// import {createBottomTabNavigator} from '@react-navigation/bottom-tabs';
// import Budget from '../screens/budget/Budget';
// import TransctionScreen from '../screens/transctionscreen/TransctionScreen';
// import Home from '../screens/home/Home';
// import Profile from '../screens/profile/Profile';
// import {Image, StyleSheet, TouchableOpacity} from 'react-native';
// import Icon from 'react-native-vector-icons/Ionicons';
// import { useState } from 'react';
// import AddModel from '../components/addModel/AddModel';

// const Tab = createBottomTabNavigator();
// export default function TabNavigation() {
//   const [modalVisible, setModalVisible] = useState(false);
//   return (
//     <>
//       <Tab.Navigator
//         screenOptions={{
//           tabBarShowLabel: true,
//           tabBarStyle: modalVisible ? styles.curvedTabBar : styles.tabBar,
//           tabBarActiveTintColor: '#7F3DFF',
//           tabBarInactiveTintColor: '#C6C6C6',
//         }}>
//         <Tab.Screen
//           name="/"
//           component={Home}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="home" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="TransctionScreen"
//           component={TransctionScreen}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="list" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="Add"
//           component={AddModel} // Replace with the desired component for adding
//           options={{
//             tabBarLabel: () => null,
//             tabBarIcon: () => (
//               <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
//                 <Icon name={modalVisible ? 'close' : 'add'} size={28} color="#fff" />
//               </TouchableOpacity>
//             ),
//           }}
//           listeners={{
//             tabPress: e => {
//               e.preventDefault();
//               setModalVisible(true);
//             },
//           }}
//         />
//         <Tab.Screen
//           name="Budget"
//           component={Budget}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon
//                 name="pie-chart"
//                 size={size}
//                 color={color}
//                 style={styles.rotatedIcon}
//               />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="Profile"
//           component={Profile}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="person" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//       </Tab.Navigator>
//       <AddModel modalVisible={modalVisible} setModalVisible={setModalVisible}/>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   tabBar: {
//     position: 'absolute',
//     height: 60,
//     backgroundColor: '#fff',
//     borderTopWidth: 0,
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   curvedTabBar: {
//     position: 'absolute',
//     height: 60, // Increased height for the curve
//     backgroundColor: '#fff',
//     borderTopLeftRadius: 30, // Curved effect
//     borderTopRightRadius: 30, // Curved effect
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   addButton: {
//     width: 55,
//     height: 55,
//     backgroundColor: '#7F3DFF',
//     borderRadius: 27.5,
//     justifyContent: 'center',
//     alignItems: 'center',
//     marginBottom: 20,
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   addButtonImage: {
//     width: 57, // Adjust size as needed
//     height: 57, // Adjust size as needed
//     resizeMode: 'contain',
//   },
//   rotatedIcon: {
//     transform: [{rotate: '105deg'}], // Rotate the icon by 90 degrees
//   },
// });

