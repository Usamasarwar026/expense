
//   export const updateImage = createAsyncThunk(
//     'auth/updateImage',
//     async (uri: string, { rejectWithValue }) => {
//       try {
//         const currentUser = auth().currentUser;
//         if (!currentUser) {
//           throw new Error('User is not authenticated');
//         }
  
//         // Update the profile image
//         await currentUser.updateProfile({ photoURL: uri });
  
//         // Return the updated image URL
//         return uri;
//       } catch (error: any) {
//         console.log('Error updating profile image: ', error.message);
  
//         // Reject with the error message
//         return rejectWithValue(error.message);
//       }
//     }
//   );




// ==========
  // export const manageImageUri = createAsyncThunk(
  //   'auth/manageImageUri',
  //   async({type, uri}: {type: string, uri: string}, {rejectWithValue })=>{
  //     const userId = await auth().currentUser?.uid;
  //     if (!userId) {
  //       console.log('Error', 'User is not authenticated');
  //       return;
  //     }
  //     try {
  //     if(type === 'fetch'){
  //         const doc = await firestore().collection('users').doc(userId).get();
  //         if (doc.exists) {
  //           return { profileImageUri: doc.data()?.profileImageUri, name: doc.data()?.name };
  //         }else{
  //           return rejectWithValue("no data found")
  //         }
          

  //     }else if(type === 'store' && uri){
  //       await firestore().collection('users').doc(userId).update({
  //           profileImageUri: uri,
  //       });
  //       return { profileImageUri: uri }
  //     }
  //       } catch (error: any) {
  //         console.error('Error in manageImageUri:', error);
  //         return rejectWithValue(error.message);
  //       }
  
  //     }
    
    
  // )
  





  {/* <View style={style.daybar}>
          <TouchableOpacity style={style.barbox}>
            <Text style={style.bar1}>Today</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Week</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Month</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Year</Text>
          </TouchableOpacity>
        </View> */}
        {/* <View style={style.recentBar}>
          <View>
            <Text style={style.recentBarText1}>Recent Transaction</Text>
          </View>
          <TouchableOpacity>
            <Text style={style.recentBarText2}>See All</Text>
          </TouchableOpacity>
        </View>
        <View style={style.listbar}> */}
         
          {/* {transactions.length === 0 ? (
            <View style={style.listtextBox}>
              <Text style={style.listtext}>No transactions found.</Text>
            </View>
          ) : (
            <FlatList
              nestedScrollEnabled={true}
              style={style.listbar}
              data={transactions}
              keyExtractor={(item, index) => item.id || index.toString()}
              renderItem={({item}) => {
                let timeString = 'N/A';

                if (item.timestamp) {
                  let dateObj = new Date(item.timestamp); // Convert timestamp string to Date object
                  if (!isNaN(dateObj.getTime())) {
                    timeString = dateObj.toLocaleTimeString([], {
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: true,
                    });
                  }
                }
                return (
                  <Transction
                    title={item.category}
                    subtitle={item.description}
                    amount={item.amount}
                    // time={item.timestamp ? item.timestamp : 'N/A'}
                    time={timeString}
                    image={{uri: item.imageUri}}
                  />
                );
              }}
            />
          )}
        </View> */}

        