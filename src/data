
//   export const updateImage = createAsyncThunk(
//     'auth/updateImage',
//     async (uri: string, { rejectWithValue }) => {
//       try {
//         const currentUser = auth().currentUser;
//         if (!currentUser) {
//           throw new Error('User is not authenticated');
//         }
  
//         // Update the profile image
//         await currentUser.updateProfile({ photoURL: uri });
  
//         // Return the updated image URL
//         return uri;
//       } catch (error: any) {
//         console.log('Error updating profile image: ', error.message);
  
//         // Reject with the error message
//         return rejectWithValue(error.message);
//       }
//     }
//   );




// ==========
  // export const manageImageUri = createAsyncThunk(
  //   'auth/manageImageUri',
  //   async({type, uri}: {type: string, uri: string}, {rejectWithValue })=>{
  //     const userId = await auth().currentUser?.uid;
  //     if (!userId) {
  //       console.log('Error', 'User is not authenticated');
  //       return;
  //     }
  //     try {
  //     if(type === 'fetch'){
  //         const doc = await firestore().collection('users').doc(userId).get();
  //         if (doc.exists) {
  //           return { profileImageUri: doc.data()?.profileImageUri, name: doc.data()?.name };
  //         }else{
  //           return rejectWithValue("no data found")
  //         }
          

  //     }else if(type === 'store' && uri){
  //       await firestore().collection('users').doc(userId).update({
  //           profileImageUri: uri,
  //       });
  //       return { profileImageUri: uri }
  //     }
  //       } catch (error: any) {
  //         console.error('Error in manageImageUri:', error);
  //         return rejectWithValue(error.message);
  //       }
  
  //     }
    
    
  // )
  





  {/* <View style={style.daybar}>
          <TouchableOpacity style={style.barbox}>
            <Text style={style.bar1}>Today</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Week</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Month</Text>
          </TouchableOpacity>
          <TouchableOpacity style={style.barbox1}>
            <Text style={style.bar2}>Year</Text>
          </TouchableOpacity>
        </View> */}
        {/* <View style={style.recentBar}>
          <View>
            <Text style={style.recentBarText1}>Recent Transaction</Text>
          </View>
          <TouchableOpacity>
            <Text style={style.recentBarText2}>See All</Text>
          </TouchableOpacity>
        </View>
        <View style={style.listbar}> */}
         
          {/* {transactions.length === 0 ? (
            <View style={style.listtextBox}>
              <Text style={style.listtext}>No transactions found.</Text>
            </View>
          ) : (
            <FlatList
              nestedScrollEnabled={true}
              style={style.listbar}
              data={transactions}
              keyExtractor={(item, index) => item.id || index.toString()}
              renderItem={({item}) => {
                let timeString = 'N/A';

                if (item.timestamp) {
                  let dateObj = new Date(item.timestamp); // Convert timestamp string to Date object
                  if (!isNaN(dateObj.getTime())) {
                    timeString = dateObj.toLocaleTimeString([], {
                      hour: '2-digit',
                      minute: '2-digit',
                      hour12: true,
                    });
                  }
                }
                return (
                  <Transction
                    title={item.category}
                    subtitle={item.description}
                    amount={item.amount}
                    // time={item.timestamp ? item.timestamp : 'N/A'}
                    time={timeString}
                    image={{uri: item.imageUri}}
                  />
                );
              }}
            />
          )}
        </View> */}

        


// tab navigation==========================

// import {createBottomTabNavigator} from '@react-navigation/bottom-tabs';
// import Budget from '../screens/budget/Budget';
// import TransctionScreen from '../screens/transctionscreen/TransctionScreen';
// import Home from '../screens/home/Home';
// import Profile from '../screens/profile/Profile';
// import {Image, StyleSheet, TouchableOpacity} from 'react-native';
// import Icon from 'react-native-vector-icons/Ionicons';
// import { useState } from 'react';
// import AddModel from '../components/addModel/AddModel';

// const Tab = createBottomTabNavigator();
// export default function TabNavigation() {
//   const [modalVisible, setModalVisible] = useState(false);
//   return (
//     <>
//       <Tab.Navigator
//         screenOptions={{
//           tabBarShowLabel: true,
//           tabBarStyle: modalVisible ? styles.curvedTabBar : styles.tabBar,
//           tabBarActiveTintColor: '#7F3DFF',
//           tabBarInactiveTintColor: '#C6C6C6',
//         }}>
//         <Tab.Screen
//           name="/"
//           component={Home}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="home" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="TransctionScreen"
//           component={TransctionScreen}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="list" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="Add"
//           component={AddModel} // Replace with the desired component for adding
//           options={{
//             tabBarLabel: () => null,
//             tabBarIcon: () => (
//               <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
//                 <Icon name={modalVisible ? 'close' : 'add'} size={28} color="#fff" />
//               </TouchableOpacity>
//             ),
//           }}
//           listeners={{
//             tabPress: e => {
//               e.preventDefault();
//               setModalVisible(true);
//             },
//           }}
//         />
//         <Tab.Screen
//           name="Budget"
//           component={Budget}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon
//                 name="pie-chart"
//                 size={size}
//                 color={color}
//                 style={styles.rotatedIcon}
//               />
//             ),
//             headerShown: false,
//           }}
//         />
//         <Tab.Screen
//           name="Profile"
//           component={Profile}
//           options={{
//             tabBarIcon: ({color, size}) => (
//               <Icon name="person" size={size} color={color} />
//             ),
//             headerShown: false,
//           }}
//         />
//       </Tab.Navigator>
//       <AddModel modalVisible={modalVisible} setModalVisible={setModalVisible}/>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   tabBar: {
//     position: 'absolute',
//     height: 60,
//     backgroundColor: '#fff',
//     borderTopWidth: 0,
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   curvedTabBar: {
//     position: 'absolute',
//     height: 60, // Increased height for the curve
//     backgroundColor: '#fff',
//     borderTopLeftRadius: 30, // Curved effect
//     borderTopRightRadius: 30, // Curved effect
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   addButton: {
//     width: 55,
//     height: 55,
//     backgroundColor: '#7F3DFF',
//     borderRadius: 27.5,
//     justifyContent: 'center',
//     alignItems: 'center',
//     marginBottom: 20,
//     shadowColor: '#000',
//     shadowOpacity: 0.1,
//     shadowRadius: 10,
//   },
//   addButtonImage: {
//     width: 57, // Adjust size as needed
//     height: 57, // Adjust size as needed
//     resizeMode: 'contain',
//   },
//   rotatedIcon: {
//     transform: [{rotate: '105deg'}], // Rotate the icon by 90 degrees
//   },
// });








// import { KeyboardType, StyleProp, TextStyle, TextInputProps, ViewStyle } from "react-native";
// import { FC } from 'react';
// import { BottomTabNavigationOptions } from '@react-navigation/bottom-tabs';
// import { NavigatorScreenParams } from '@react-navigation/native';
// import { IconProps } from 'react-native-vector-icons/Icon';
// import { NativeStackNavigationProp } from "@react-navigation/native-stack";

// export type TabItem = {
//   id: number;
//   name: string;
//   component: FC<any>;
//   icon: IconProps['name'];
//   headerShown?: BottomTabNavigationOptions['headerShown'];
//   isAddButton?: boolean;
// };
// export type TabsArray = TabItem[];

// export type RootStackParamList = {
//     LaunchScreen: undefined;
//     SignUp: undefined;
//     Login: undefined;
//     Forget: undefined;
//     Home: undefined;
//     TabNavigation: undefined;
//     EditProfile: undefined;
//     profile: undefined;
//     ResetPassword: undefined;
//     Logout: undefined;
//     FinancialReport: undefined;
//     DetailTransction: undefined;
//     AddModel: undefined;
//     Expense: undefined;
//     Income: undefined;
//     name?: undefined;
//   };
//   export type NavigationProps = NativeStackNavigationProp<RootStackParamList>;

//   export type TransctionProp = {
//     title: string,
//     subtitle: string,
//     amount: number,
//     time: string,
//     image: { uri: string },
//     type: string
//   }
//   export type ImageProp = {
//     uri: string,
    
//   }

//   // openModel, setOpenModel, onSelectImage
//  export type AttachmentProp = {
//     openModel: () => void,
//     setOpenModel: (value: boolean) => void,
//     onSelectImage: (uri: string) => void,
//  }

//  export type ImagePickerResponse = {
//    assets?: { uri: string }[];
//  };

// export type DropdownItem = {
//   id: string | number;
//   value: string;
//   label: string;
// };

// // export type CategoryDropdownProps = {
// //   dropdownPosition?: 'center' | 'left' | 'above'; // Define allowed positions
// //   type?: 'All' | 'Expense' | 'Income'; // Define category type
// //   style?: string; // Accepts different styling options
// // };

// // export type DropdownProps = {
// //   dropdownPosition?: "center" | "left";
// //   // setSelectedMonth: (month: string) => void;
// // };

// export interface InputProps extends TextInputProps {
//   style?: StyleProp<TextStyle>;
// }


// export type LogoutModelProps = {
//   openModel: boolean;
//   setOpenModel: (value: boolean) => void;
//   title: string;
//   description: string;
//   text: string;
//   YesPress?: () => Promise<void> | void;
//   navigateToHome?: boolean;
//   navigateToLogin?: boolean;
// }

// export type ProgressBarProps = {
//   categoryName: string;
//   amount: string | number;
//   progress: number;
//   color: string;
//   textColor: string;
//   onPress?: () => void;
// }

// export type SuccessfulModelProps = {
//   openModel: boolean;
//   setOpenModel: (value: boolean) => void;
//   text: string;
// }
// export type Transaction = {
//   id: string; // Unique ID for the transaction
//   amount: number; // Transaction amount
//   timestamp: string; // ISO date string
//   category?: string; // Optional category
// }

// export type GroupedTransactions = {
//   Today: Transaction[];
//   Yesterday: Transaction[];
//   "This Week": Transaction[];
//   "This Month": Transaction[];
//   Older: Transaction[];
// }

// export type TimeReturnType = GroupedTransactions | Record<string, Transaction[]>;



//   // export type signupInput = {
//   //   style: StyleProp<TextStyle>;
//   //   keyboardType: KeyboardType;
//   //   placeholder: string;
//   //   placeholderTextColor: string;
//   //   value: string;
//   //   onChangeText: (text: string) => void;
//   //   secureTextEntry?: boolean;

//   // }



// import React, { useEffect, useState } from 'react';
// import { NavigationContainer } from '@react-navigation/native';
// import auth from '@react-native-firebase/auth';
// import AuthNavigation from './authNavigation/AuthNavigation';
// import AppNavigation from './appNavigation/AppNavigation';
// import LaunchScreen from '../screens/launchScreen/LaunchScreen';

// export default function Navigation() {
//   const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);

//   useEffect(() => {
//     const unsubscribe = auth().onAuthStateChanged(user => {
//       setIsAuthenticated(!!user);
//     });

//     return unsubscribe;
//   }, []);
//   if (isAuthenticated === null) {
//     return (
//         <NavigationContainer>
//             <LaunchScreen />
//         </NavigationContainer>
//     );
// }


//   return (
//     <NavigationContainer>
//       {isAuthenticated ? <AppNavigation /> : <AuthNavigation />}
//     </NavigationContainer>
//   );
// }















// // import * as React from 'react';
// // import { NavigationContainer } from '@react-navigation/native';
// // import { createNativeStackNavigator } from '@react-navigation/native-stack';
// // import LaunchScreen from '../screens/launchScreen/LaunchScreen'; 
// // import Login from '../screens/login/Login';
// // import SignUp from '../screens/signup/SignUp';
// // import Forget from '../screens/forget/Forget';
// // import { RootStackParamList } from '../types/types';
// // import TabNavigation from './tabNavigation/TabNavigation';
// // import EditProfile from '../screens/editProfile/EditProfile';
// // import ResetPassword from '../screens/resetPassword/ResetPassword';
// // import Logout from '../screens/logout/Logout';
// // import FinancialReport from '../screens/financialReport/FinancialReport';
// // import DetailTransction from '../screens/detailTransction/DetailTransction';
// // import AddModel from '../components/addModel/AddModel';
// // import Expense from '../screens/expense/Expense';
// // import Income from '../screens/income/Income';
// // import auth from '@react-native-firebase/auth'

// // const Stack = createNativeStackNavigator<RootStackParamList>();


// // export default function Navigation() {
// //   const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(false);

// //   React.useEffect(() => {
// //     const currentUser = auth().currentUser;
// //     if (!currentUser) {
// //       auth().signOut();
// //     }
// //     if (currentUser) {
// //       setIsAuthenticated(true);
// //     } else {
// //       setIsAuthenticated(false);
// //     }

// //     const unsubscribe = auth().onAuthStateChanged(user => {
// //       user?.reload();
// //       setIsAuthenticated(!!user);
// //     });
// //     return unsubscribe;
// //   }, []);
// //   return (
// //     <NavigationContainer>
// //       <Stack.Navigator initialRouteName="LaunchScreen">
        
// //         <Stack.Screen name="LaunchScreen" component={LaunchScreen} options={{ headerShown: false }} />
// //         <Stack.Screen name="Login" component={Login} options={{ headerShown: false }} />
// //         <Stack.Screen name="SignUp" component={SignUp} options={{ headerShown: false }}/>
// //         <Stack.Screen name="Forget" component={Forget} options={{ headerShown: false }}/>
// //         <Stack.Screen name="TabNavigation" component={TabNavigation} options={{ headerShown: false }}/>
// //         <Stack.Screen name="EditProfile" component={EditProfile} options={{ headerShown: false }}/>
// //         <Stack.Screen name="Logout" component={Logout} options={{ headerShown: false }}/>
// //         <Stack.Screen name="ResetPassword" component={ResetPassword} options={{ headerShown: false }}/>
// //         <Stack.Screen name="FinancialReport" component={FinancialReport} options={{ headerShown: false }}/>
// //         <Stack.Screen name="DetailTransction" component={DetailTransction} options={{ headerShown: false }}/>
// //         <Stack.Screen name="AddModel" component={AddModel} options={{ headerShown: false }}/>
// //         <Stack.Screen name="Expense" component={Expense} options={{ headerShown: false }}/>
// //         <Stack.Screen name="Income" component={Income} options={{ headerShown: false }}/>
// //       </Stack.Navigator>
// //     </NavigationContainer>
// //   );
// // }
